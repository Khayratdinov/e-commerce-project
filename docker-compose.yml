version: "2"
services:
  db:
    image: postgres:12.0-alpine
    container_name: np-books_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
  web:
    build:
      context: .
      dockerfile: ./docker/local/django/Dockerfile
    container_name: np-books_web

    command: gunicorn project.wsgi:application --bind 0.0.0.0:8080

    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    env_file:
      - .env

    expose:
      - 8080
    # environment:
    #   - VIRTUAL_HOST=np-books.uz
    #   - VIRTUAL_PORT=8000
    #   - LETSENCRYPT_HOST=np-books.uz
    depends_on:
      - db
  nginx:
    build:
      context: ./docker/local/nginx
      dockerfile: Dockerfile
    container_name: np-books_nginx
    image: np-books_nginx
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
      # - certs:/etc/nginx/certs
      # - vhost:/etc/nginx/vhost.d
      # - html:/usr/share/nginx/html
      # - /var/run/docker.sock:/tmp/docker.sock:ro

    restart: always
    ports:
      - "80:80"
      # - "443:443"
    depends_on:
      - web
  # acme_companion:
  #   image: nginxproxy/acme-companion:2.2
  #   container_name: np-books_acme_companion
  #   volumes_from:
  #     - nginx
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - acme:/etc/acme.sh

volumes:
  postgres_data:
  static_volume:
  media_volume:
    # certs:
    # vhost:
    # html:
    # acme:


